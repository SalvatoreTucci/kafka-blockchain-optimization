version: '3.8'

networks:
  kafka-blockchain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  orderer.example.com:
  peer0.org1.example.com:
  peer1.org1.example.com:
  peer0.org2.example.com:
  peer1.org2.example.com:
  ca.org1.example.com:
  ca.org2.example.com:
  prometheus_data:
  grafana_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  zookeeper1_data:
  zookeeper2_data:
  zookeeper3_data:

services:
  # ================== ZOOKEEPER ENSEMBLE ==================
  zookeeper1:
    image: hyperledger/fabric-zookeeper:0.4.22
    container_name: zookeeper1
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2181:2181"
    volumes:
      - zookeeper1_data:/data
      - zookeeper1_data:/datalog
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  zookeeper2:
    image: hyperledger/fabric-zookeeper:0.4.22
    container_name: zookeeper2
    environment:
      - ZOOKEEPER_CLIENT_PORT=2182
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SERVER_ID=2
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2182:2182"
    volumes:
      - zookeeper2_data:/data
      - zookeeper2_data:/datalog
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  zookeeper3:
    image: hyperledger/fabric-zookeeper:0.4.22
    container_name: zookeeper3
    environment:
      - ZOOKEEPER_CLIENT_PORT=2183
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SERVER_ID=3
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2183:2183"
    volumes:
      - zookeeper3_data:/data
      - zookeeper3_data:/datalog
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # ================== KAFKA BROKERS ==================
  kafka1:
    image: hyperledger/fabric-kafka:0.4.22
    container_name: kafka1
    environment:
      # Basic Kafka Configuration
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      
      # Parameters to be optimized (DEFAULT VALUES from Paper 3)
      - KAFKA_BATCH_SIZE=${KAFKA_BATCH_SIZE:-16384}
      - KAFKA_LINGER_MS=${KAFKA_LINGER_MS:-0}
      - KAFKA_COMPRESSION_TYPE=${KAFKA_COMPRESSION_TYPE:-none}
      - KAFKA_BUFFER_MEMORY=${KAFKA_BUFFER_MEMORY:-33554432}
      - KAFKA_NUM_NETWORK_THREADS=${KAFKA_NUM_NETWORK_THREADS:-3}
      - KAFKA_NUM_IO_THREADS=${KAFKA_NUM_IO_THREADS:-8}
      - KAFKA_SOCKET_SEND_BUFFER_BYTES=${KAFKA_SOCKET_SEND_BUFFER_BYTES:-102400}
      - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES:-1048576}
      
      # Hyperledger Fabric specific
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      
      # Monitoring (JMX for Prometheus)
      - KAFKA_JMX_HOSTNAME=kafka1
      - KAFKA_JMX_PORT=9999
      - KAFKA_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1
    ports:
      - "9092:9092"
      - "9999:9999"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    volumes:
      - kafka1_data:/opt/kafka/logs
      - ./configs/kafka:/opt/kafka/config
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  kafka2:
    image: hyperledger/fabric-kafka:0.4.22
    container_name: kafka2
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9093
      
      # Same parameterized configuration as kafka1
      - KAFKA_BATCH_SIZE=${KAFKA_BATCH_SIZE:-16384}
      - KAFKA_LINGER_MS=${KAFKA_LINGER_MS:-0}
      - KAFKA_COMPRESSION_TYPE=${KAFKA_COMPRESSION_TYPE:-none}
      - KAFKA_BUFFER_MEMORY=${KAFKA_BUFFER_MEMORY:-33554432}
      - KAFKA_NUM_NETWORK_THREADS=${KAFKA_NUM_NETWORK_THREADS:-3}
      - KAFKA_NUM_IO_THREADS=${KAFKA_NUM_IO_THREADS:-8}
      - KAFKA_SOCKET_SEND_BUFFER_BYTES=${KAFKA_SOCKET_SEND_BUFFER_BYTES:-102400}
      - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES:-1048576}
      
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      
      - KAFKA_JMX_HOSTNAME=kafka2
      - KAFKA_JMX_PORT=9998
      - KAFKA_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka2
    ports:
      - "9093:9093"
      - "9998:9998"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    volumes:
      - kafka2_data:/opt/kafka/logs
      - ./configs/kafka:/opt/kafka/config
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  kafka3:
    image: hyperledger/fabric-kafka:0.4.22
    container_name: kafka3
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9094
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9094
      
      # Same parameterized configuration
      - KAFKA_BATCH_SIZE=${KAFKA_BATCH_SIZE:-16384}
      - KAFKA_LINGER_MS=${KAFKA_LINGER_MS:-0}
      - KAFKA_COMPRESSION_TYPE=${KAFKA_COMPRESSION_TYPE:-none}
      - KAFKA_BUFFER_MEMORY=${KAFKA_BUFFER_MEMORY:-33554432}
      - KAFKA_NUM_NETWORK_THREADS=${KAFKA_NUM_NETWORK_THREADS:-3}
      - KAFKA_NUM_IO_THREADS=${KAFKA_NUM_IO_THREADS:-8}
      - KAFKA_SOCKET_SEND_BUFFER_BYTES=${KAFKA_SOCKET_SEND_BUFFER_BYTES:-102400}
      - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES:-1048576}
      
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      
      - KAFKA_JMX_HOSTNAME=kafka3
      - KAFKA_JMX_PORT=9997
      - KAFKA_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka3
    ports:
      - "9094:9094"
      - "9997:9997"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    volumes:
      - kafka3_data:/opt/kafka/logs
      - ./configs/kafka:/opt/kafka/config
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # ================== HYPERLEDGER FABRIC ORDERER ==================
  orderer.example.com:
    image: hyperledger/fabric-orderer:2.4
    container_name: orderer.example.com
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      
      # Kafka-based ordering service configuration
      - ORDERER_KAFKA_BROKERS=[kafka1:9092,kafka2:9093,kafka3:9094]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=3
      - ORDERER_KAFKA_VERBOSE=false
      - ORDERER_KAFKA_VERSION=2.6.0
      
      # Genesis block
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      
      # TLS (disabled for testing)
      - ORDERER_GENERAL_TLS_ENABLED=false
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./configs/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./configs/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - "7050:7050"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # ================== CERTIFICATE AUTHORITIES ==================
  ca.org1.example.com:
    image: hyperledger/fabric-ca:1.5
    container_name: ca.org1.example.com
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org1
      - FABRIC_CA_SERVER_TLS_ENABLED=false
      - FABRIC_CA_SERVER_PORT=7054
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca.org1.example.com:/etc/hyperledger/fabric-ca-server
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  ca.org2.example.com:
    image: hyperledger/fabric-ca:1.5
    container_name: ca.org2.example.com
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org2
      - FABRIC_CA_SERVER_TLS_ENABLED=false
      - FABRIC_CA_SERVER_PORT=8054
    ports:
      - "8054:8054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca.org2.example.com:/etc/hyperledger/fabric-ca-server
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # ================== FABRIC PEERS ==================
  peer0.org1.example.com:
    image: hyperledger/fabric-peer:2.4
    container_name: peer0.org1.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=kafka-blockchain-optimization_kafka-blockchain-network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:8051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./configs/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - peer0.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "7051:7051"
    depends_on:
      - orderer.example.com
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  peer1.org1.example.com:
    image: hyperledger/fabric-peer:2.4
    container_name: peer1.org1.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=kafka-blockchain-optimization_kafka-blockchain-network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:8051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:8052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./configs/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - peer1.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "8051:8051"
    depends_on:
      - orderer.example.com
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  peer0.org2.example.com:
    image: hyperledger/fabric-peer:2.4
    container_name: peer0.org2.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=kafka-blockchain-optimization_kafka-blockchain-network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:9051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:10051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./configs/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
      - peer0.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "9051:9051"
    depends_on:
      - orderer.example.com
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  peer1.org2.example.com:
    image: hyperledger/fabric-peer:2.4
    container_name: peer1.org2.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=kafka-blockchain-optimization_kafka-blockchain-network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:10051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:10051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:10052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:10052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:10051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./configs/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
      - peer1.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "10051:10051"
    depends_on:
      - orderer.example.com
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # ================== MONITORING STACK ==================
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - kafka-blockchain-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # JMX Exporter for Kafka metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka1:9092
      - --kafka.server=kafka2:9093
      - --kafka.server=kafka3:9094
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # Container resource monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - kafka-blockchain-network
    restart: unless-stopped

  # ================== BENCHMARK RUNNER ==================
  caliper-benchmark:
    image: hyperledger/caliper:0.5.0
    container_name: caliper-benchmark
    volumes:
      - ./benchmarks:/hyperledger/caliper/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /hyperledger/caliper/workspace
    depends_on:
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
      - orderer.example.com
    networks:
      - kafka-blockchain-network
    profiles:
      - benchmark
    command: |
      sh -c "
        echo 'Waiting for network to be ready...' &&
        sleep 30 &&
        npx caliper launch manager --caliper-workspace ./ --caliper-benchconfig benchmarks/smallbank-config.yaml --caliper-networkconfig networks/fabric-kafka.yaml
      "