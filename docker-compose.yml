networks:
  kafka-net:
    driver: bridge

volumes:
  kafka-data:
  zk-data:
  prometheus-data:
  grafana-data:

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - kafka-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zk-data:/var/lib/zookeeper/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # Kafka - Health check migliorato
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    networks:
      - kafka-net
    ports:
      - "9092:9092"
      - "9094:9094"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      
      # Producer configs
      KAFKA_PRODUCER_BATCH_SIZE: 16384
      KAFKA_PRODUCER_LINGER_MS: 0
      KAFKA_PRODUCER_COMPRESSION_TYPE: none
      KAFKA_PRODUCER_BUFFER_MEMORY: 33554432
      
      # Server configs
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      
      # Blockchain requirements
      KAFKA_PRODUCER_ACKS: all
      KAFKA_PRODUCER_RETRIES: 2147483647
      KAFKA_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      KAFKA_PRODUCER_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: 1
      
      # Monitoring
      KAFKA_JMX_PORT: 9094
      KAFKA_JMX_HOSTNAME: kafka
      
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./configs:/configs
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 | grep ApiVersion || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 12
      start_period: 90s

  # Test runner
  test-runner:
    image: python:3.9-slim
    container_name: test-runner
    networks:
      - kafka-net
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/workspace
      - ./results:/results
      - ./scripts:/scripts
      - ./configs:/configs 
    working_dir: /workspace
    command: |
      sh -c "
      apt-get update && apt-get install -y netcat-traditional curl &&
      pip install kafka-python==2.0.2 requests==2.31.0 &&
      tail -f /dev/null
      "
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - kafka-net
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - kafka-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

  # JMX Exporter
  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter:latest
    hostname: jmx-exporter
    container_name: jmx-exporter
    networks:
      - kafka-net
    ports:
      - "8080:8080"
    environment:
      - CONFIG_YML=/etc/jmx_exporter/config.yml
    volumes:
      - ./configs/monitoring/jmx_exporter_config.yml:/etc/jmx_exporter/config.yml:ro
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped