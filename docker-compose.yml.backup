version: '3.8'

networks:
  blockchain-network:
    driver: bridge

volumes:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  peer0_org1_data:
  peer0_org2_data:
  orderer_data:
  ca_org1_data:
  ca_org2_data:

services:
  # ================== ZOOKEEPER ==================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - blockchain-network
    restart: unless-stopped

  # ================== KAFKA BROKER ==================
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      # Basic Configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      # Optimizable Parameters (DEFAULT VALUES)
      KAFKA_BATCH_SIZE: ${KAFKA_BATCH_SIZE:-16384}
      KAFKA_LINGER_MS: ${KAFKA_LINGER_MS:-0}
      KAFKA_COMPRESSION_TYPE: ${KAFKA_COMPRESSION_TYPE:-none}
      KAFKA_BUFFER_MEMORY: ${KAFKA_BUFFER_MEMORY:-33554432}
      KAFKA_NUM_NETWORK_THREADS: ${KAFKA_NUM_NETWORK_THREADS:-3}
      KAFKA_NUM_IO_THREADS: ${KAFKA_NUM_IO_THREADS:-8}
      KAFKA_SOCKET_SEND_BUFFER_BYTES: ${KAFKA_SOCKET_SEND_BUFFER_BYTES:-102400}
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: ${KAFKA_SOCKET_RECEIVE_BUFFER_BYTES:-102400}
      KAFKA_REPLICA_FETCH_MAX_BYTES: ${KAFKA_REPLICA_FETCH_MAX_BYTES:-1048576}
      
      # Blockchain-specific settings
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_DELETE_TOPIC_ENABLE: false
      KAFKA_LOG_RETENTION_HOURS: 168
      
      # JMX for monitoring
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: kafka
    ports:
      - "9092:9092"
      - "9999:9999"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - blockchain-network
    restart: unless-stopped

  # ================== CERTIFICATE AUTHORITIES ==================
  ca-org1:
    image: hyperledger/fabric-ca:1.5
    container_name: ca-org1
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org1
      - FABRIC_CA_SERVER_TLS_ENABLED=false
      - FABRIC_CA_SERVER_PORT=7054
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca_org1_data:/etc/hyperledger/fabric-ca-server
    networks:
      - blockchain-network

  ca-org2:
    image: hyperledger/fabric-ca:1.5
    container_name: ca-org2
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org2
      - FABRIC_CA_SERVER_TLS_ENABLED=false
      - FABRIC_CA_SERVER_PORT=8054
    ports:
      - "8054:8054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca_org2_data:/etc/hyperledger/fabric-ca-server
    networks:
      - blockchain-network

  # ================== FABRIC ORDERER (KAFKA-BASED) ==================
  orderer:
    image: hyperledger/fabric-orderer:2.5
    container_name: orderer
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=false
      
      # Kafka Configuration
      - ORDERER_KAFKA_BROKERS=[kafka:9092]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_VERBOSE=false
      - ORDERER_KAFKA_VERSION=2.8.0
      
      # Channel participation
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=false
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7053
      
      # Operations
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./blockchain-config/orderer:/var/hyperledger/orderer
      - orderer_data:/var/hyperledger/production/orderer
    ports:
      - "7050:7050"
      - "7053:7053"
      - "8443:8443"
    depends_on:
      - kafka
      - ca-org1
      - ca-org2
    networks:
      - blockchain-network

  # ================== FABRIC PEERS ==================
  peer0-org1:
    image: hyperledger/fabric-peer:2.5
    container_name: peer0-org1
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=blockchain-network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0-org1
      - CORE_PEER_ADDRESS=peer0-org1:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0-org1:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0-org2:9051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0-org1:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9444
      - CORE_METRICS_PROVIDER=prometheus
    volumes:
      - /var/run/:/host/var/run/
      - ./blockchain-config/org1/peer0:/etc/hyperledger/fabric/msp
      - peer0_org1_data:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "7051:7051"
      - "9444:9444"
    depends_on:
      - orderer
      - ca-org1
    networks:
      - blockchain-network

  peer0-org2:
    image: hyperledger/fabric-peer:2.5
    container_name: peer0-org2
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=blockchain-network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0-org2
      - CORE_PEER_ADDRESS=peer0-org2:9051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
      - CORE_PEER_CHAINCODEADDRESS=peer0-org2:9052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0-org2:9051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0-org1:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9445
      - CORE_METRICS_PROVIDER=prometheus
    volumes:
      - /var/run/:/host/var/run/
      - ./blockchain-config/org2/peer0:/etc/hyperledger/fabric/msp
      - peer0_org2_data:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "9051:9051"
      - "9445:9445"
    depends_on:
      - orderer
      - ca-org2
    networks:
      - blockchain-network

  # ================== MONITORING ==================
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - blockchain-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - blockchain-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ================== BLOCKCHAIN TESTING ==================
  cli:
    image: hyperledger/fabric-tools:2.5
    container_name: cli
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0-org1:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/:/host/var/run/
      - ./blockchain-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto
      - ./chaincodes:/opt/gopath/src/github.com/chaincode
      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
    depends_on:
      - orderer
      - peer0-org1
      - peer0-org2
    networks:
      - blockchain-network
    profiles:
      - blockchain

  # ================== BENCHMARK TOOLS ==================
  kafka-perf-test:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-perf-test
    depends_on:
      - kafka
    volumes:
      - ./benchmarks:/opt/benchmarks
      - ./results:/opt/results
    working_dir: /opt/benchmarks
    networks:
      - blockchain-network
    profiles:
      - testing
    command: tail -f /dev/null