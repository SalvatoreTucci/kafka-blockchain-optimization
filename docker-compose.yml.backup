version: '3.8'

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:

services:
  # ================== ZOOKEEPER ==================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_data:/var/lib/zookeeper/log
    networks:
      - kafka-network
    restart: unless-stopped

  # ================== KAFKA BROKER ==================
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      # Basic Kafka Configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      # Parameters to be optimized (DEFAULT VALUES)
      KAFKA_BATCH_SIZE: ${KAFKA_BATCH_SIZE:-16384}
      KAFKA_LINGER_MS: ${KAFKA_LINGER_MS:-0}
      KAFKA_COMPRESSION_TYPE: ${KAFKA_COMPRESSION_TYPE:-none}
      KAFKA_BUFFER_MEMORY: ${KAFKA_BUFFER_MEMORY:-33554432}
      KAFKA_NUM_NETWORK_THREADS: ${KAFKA_NUM_NETWORK_THREADS:-3}
      KAFKA_NUM_IO_THREADS: ${KAFKA_NUM_IO_THREADS:-8}
      KAFKA_SOCKET_SEND_BUFFER_BYTES: ${KAFKA_SOCKET_SEND_BUFFER_BYTES:-102400}
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: ${KAFKA_SOCKET_RECEIVE_BUFFER_BYTES:-102400}
      KAFKA_REPLICA_FETCH_MAX_BYTES: ${KAFKA_REPLICA_FETCH_MAX_BYTES:-1048576}
      
      # Performance settings
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
      
      # JMX for monitoring
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "9092:9092"
      - "9999:9999"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka-network
    restart: unless-stopped

  # ================== MONITORING ==================
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus-simple.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - kafka-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - kafka-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # JMX to Prometheus exporter for Kafka
  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter:0.17.2
    container_name: jmx-exporter
    ports:
      - "5556:5556"
    volumes:
      - ./configs/jmx-exporter.yml:/opt/jmx_prometheus_httpserver.yml
    command:
      - "5556"
      - "/opt/jmx_prometheus_httpserver.yml"
    depends_on:
      - kafka
    networks:
      - kafka-network
    restart: unless-stopped

  # ================== BENCHMARK TOOLS ==================
  kafka-benchmark:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-benchmark
    depends_on:
      - kafka
    volumes:
      - ./benchmarks:/opt/benchmarks
      - ./results:/opt/results
    working_dir: /opt/benchmarks
    networks:
      - kafka-network
    profiles:
      - benchmark
    command: |
      sh -c "
        echo 'Kafka Benchmark Container Ready'
        tail -f /dev/null
      "