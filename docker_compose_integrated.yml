networks:
  kafka-blockchain-net:
    driver: bridge

volumes:
  kafka-data:
  zk-data:
  prometheus-data:
  grafana-data:
  orderer-data:
  peer0-org1-data:
  peer0-org2-data:

services:
  # === KAFKA INFRASTRUCTURE (Mantiene funzionalità esistente) ===
  
  # Zookeeper con configurazione Windows-friendly
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - kafka-blockchain-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zk-data:/var/lib/zookeeper/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "echo srvr | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka con configurazione ottimizzata (funziona già)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    networks:
      - kafka-blockchain-net
    ports:
      - "9092:9092"
      - "9094:9094"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9094
      KAFKA_JMX_HOSTNAME: localhost
      
      # Configurazione Windows-friendly
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      
      # Memory settings per Windows
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      
      # Ottimizzazioni dinamiche (caricate da .env)
      KAFKA_BATCH_SIZE: ${KAFKA_BATCH_SIZE:-16384}
      KAFKA_LINGER_MS: ${KAFKA_LINGER_MS:-0}
      KAFKA_COMPRESSION_TYPE: ${KAFKA_COMPRESSION_TYPE:-none}
      KAFKA_BUFFER_MEMORY: ${KAFKA_BUFFER_MEMORY:-33554432}
      KAFKA_NUM_NETWORK_THREADS: ${KAFKA_NUM_NETWORK_THREADS:-3}
      KAFKA_NUM_IO_THREADS: ${KAFKA_NUM_IO_THREADS:-8}
      KAFKA_SOCKET_SEND_BUFFER_BYTES: ${KAFKA_SOCKET_SEND_BUFFER_BYTES:-102400}
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: ${KAFKA_SOCKET_RECEIVE_BUFFER_BYTES:-102400}
      KAFKA_REPLICA_FETCH_MAX_BYTES: ${KAFKA_REPLICA_FETCH_MAX_BYTES:-1048576}
      
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Test runner con Python e dependencies (mantiene funzionalità)
  test-runner:
    image: python:3.9-slim
    container_name: test-runner
    networks:
      - kafka-blockchain-net
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/workspace
      - ./results:/workspace/results
    working_dir: /workspace
    command: |
      sh -c "
      apt-get update && apt-get install -y netcat-traditional curl &&
      pip install kafka-python==2.0.2 requests==2.31.0 &&
      tail -f /dev/null
      "
    restart: unless-stopped

  # === BLOCKCHAIN INFRASTRUCTURE ===
  
  # Orderer che usa Kafka per ordering (integrazione principale)
  orderer:
    image: hyperledger/fabric-orderer:2.4.7
    container_name: orderer
    hostname: orderer.example.com
    networks:
      - kafka-blockchain-net
    ports:
      - "7050:7050"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=false
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=file
      - ORDERER_GENERAL_BOOTSTRAPFILE=/var/hyperledger/orderer/genesis.block
      - ORDERER_CHANNELPARTICIPATION_ENABLED=false
      
      # Kafka Integration (usa Kafka ottimizzato)
      - ORDERER_KAFKA_BROKERS=[kafka:29092]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_VERSION=2.8.1
      
      # Memory e performance
      - ORDERER_GENERAL_BATCHSIZE_MAXMESSAGECOUNT=10
      - ORDERER_GENERAL_BATCHSIZE_ABSOLUTEMAXBYTES=1048576
      - ORDERER_GENERAL_BATCHSIZE_PREFERREDMAXBYTES=524288
      - ORDERER_GENERAL_BATCHTIMEOUT=2s
      
    volumes:
      - ./blockchain-config/genesis.block:/var/hyperledger/orderer/genesis.block
      - ./blockchain-config/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - orderer-data:/var/hyperledger/production/orderer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "netstat -lnp | grep :7050"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Peer Org1
  peer0-org1:
    image: hyperledger/fabric-peer:2.4.7
    container_name: peer0-org1
    hostname: peer0.org1.example.com
    networks:
      - kafka-blockchain-net
    ports:
      - "7051:7051"
    depends_on:
      orderer:
        condition: service_healthy
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=kafka-blockchain-net
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:8051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      
      # Performance tuning
      - CORE_PEER_KEEPALIVE_MININTERVAL=60s
      - CORE_PEER_GOSSIP_DIALBACKOFF=1s
      - CORE_PEER_GOSSIP_ALIVEEXPIRATIONTIMEOUT=25s
      
    volumes:
      - /var/run/:/host/var/run/
      - ./blockchain-config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - peer0-org1-data:/var/hyperledger/production
    restart: unless-stopped

  # Peer Org2
  peer0-org2:
    image: hyperledger/fabric-peer:2.4.7
    container_name: peer0-org2
    hostname: peer0.org2.example.com
    networks:
      - kafka-blockchain-net
    ports:
      - "8051:8051"
    depends_on:
      orderer:
        condition: service_healthy
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=kafka-blockchain-net
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:8051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:8052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:8051
      - CORE_PEER_LOCALMSPID=Org2MSP
      
      # Performance tuning
      - CORE_PEER_KEEPALIVE_MININTERVAL=60s
      - CORE_PEER_GOSSIP_DIALBACKOFF=1s
      - CORE_PEER_GOSSIP_ALIVEEXPIRATIONTIMEOUT=25s
      
    volumes:
      - /var/run/:/host/var/run/
      - ./blockchain-config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
      - peer0-org2-data:/var/hyperledger/production
    restart: unless-stopped

  # CLI per operazioni blockchain
  cli:
    image: hyperledger/fabric-tools:2.4.7
    container_name: cli
    hostname: cli
    networks:
      - kafka-blockchain-net
    tty: true
    stdin_open: true
    depends_on:
      - orderer
      - peer0-org1
      - peer0-org2
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c 'sleep 3600'
    volumes:
      - /var/run/:/host/var/run/
      - ./chaincodes:/opt/gopath/src/github.com/chaincode
      - ./blockchain-config/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./blockchain-config/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    restart: unless-stopped

  # === MONITORING (Opzionale ma utile) ===
  
  # Prometheus per metriche
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - kafka-blockchain-net
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana per visualizzazione
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - kafka-blockchain-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped