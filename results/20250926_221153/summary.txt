Kafka Performance Test Summary
==============================
Test: baseline
Date: ven 26 set 2025 22:13:52
Configuration: .env.default
Status: COMPLETED SUCCESSFULLY

=== Configuration Parameters ===
Batch Size: 16384 bytes
Linger Time: 0 ms
Compression: none
Buffer Memory: 33554432 bytes
Network Threads: 3
IO Threads: 8

=== Performance Results ===
Producer Throughput: 999.633468 records/sec
Total Records Sent: 30000
Average Latency: 2.52 ms
Maximum Latency: 383.00 ms

Consumer Throughput: N/A records/sec
Consumer Data Rate: N/A MB/sec

=== System Resources ===
CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O        PIDS
741cc4edcb15   kafka     1.25%     452.4MiB / 7.434GiB   5.94%     50.2kB / 54.4kB   963kB / 14.4MB   93

=== Research Analysis ===
This test establishes baseline performance with the specified configuration.
Results can be compared with Paper 2/3 literature baselines (~1000 TPS target).

Paper Comparison:
- Target TPS: 1000 (Paper 2/3 baseline)
- Measured TPS: 999.633468
- Status: âœ“ Good baseline established

=== Files Generated ===
- producer-test.log: Detailed producer performance metrics
- consumer-test.log: Detailed consumer performance metrics
- docker-stats.txt: System resource usage during test
- topics.txt: Kafka topic information

=== Next Steps ===
1. If results look good: test optimized configurations
2. Compare with optimizations: ./scripts/simple-kafka-test.sh .env.batch-optimized
3. Run analysis: python3 scripts/analyze-simple-results.py results/20250926_221153
4. Generate research findings

=== Troubleshooting (if results are poor) ===
- Increase Docker memory allocation (4GB+ recommended)
- Check: docker stats (during test)
- Check: docker-compose logs kafka
- Try: docker-compose down -v && docker system prune -f
