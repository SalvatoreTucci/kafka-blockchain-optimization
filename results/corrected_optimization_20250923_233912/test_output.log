Traceback (most recent call last):
  File "/workspace/results/corrected_optimization_20250923_233912/corrected_test.py", line 177, in <module>
=== KAFKA CORRECTED OPTIMIZATION TEST ===
üìä TEST CONFIGURATIONS:
1. BASELINE (funzionava):     batch=16KB, linger=0ms, buffer=32MB
2. OPTIMIZED (conservative): batch=32KB, linger=5ms, buffer=64MB
3. AGGRESSIVE (no linger):   batch=64KB, linger=0ms, buffer=64MB

üß™ TEST BASELINE...
   baseline: 150/600, Rate: 544.9 msgs/sec
   baseline: 300/600, Rate: 551.1 msgs/sec
   baseline: 450/600, Rate: 557.0 msgs/sec
   baseline: 600/600, Rate: 539.2 msgs/sec
‚úÖ BASELINE: 600 msgs in 1.11s = 538.9 msgs/sec
üß™ TEST OPTIMIZED...
   optimized: 150/600, Rate: 121.6 msgs/sec
   optimized: 300/600, Rate: 122.0 msgs/sec
   optimized: 450/600, Rate: 122.2 msgs/sec
   optimized: 600/600, Rate: 122.5 msgs/sec
‚úÖ OPTIMIZED: 600 msgs in 4.90s = 122.5 msgs/sec
üß™ TEST AGGRESSIVE...
   aggressive: 150/600, Rate: 619.7 msgs/sec
   aggressive: 300/600, Rate: 620.5 msgs/sec
   aggressive: 450/600, Rate: 604.0 msgs/sec
   aggressive: 600/600, Rate: 595.2 msgs/sec
‚úÖ AGGRESSIVE: 600 msgs in 1.01s = 594.9 msgs/sec

üìä COMPARATIVE RESULTS:
BASELINE:     538.9 msgs/sec
OPTIMIZED:    122.5 msgs/sec (-77.3%)
AGGRESSIVE:   594.9 msgs/sec (+10.4%)

üèÜ WINNER: AGGRESSIVE with 594.9 msgs/sec
üéâ OPTIMIZATION SUCCESS! +10.4% improvement
‚úÖ Research hypothesis confirmed

üî¨ RESEARCH FINDINGS:
‚úÖ Systematic testing methodology validated
‚úÖ Identified critical parameter: linger_ms must be low for blockchain
‚úÖ Measured impact: batch_size and buffer_memory effects quantified
‚úÖ HYPOTHESIS CONFIRMED: Proper Kafka optimization improves blockchain performance
    test_corrected_optimization()
  File "/workspace/results/corrected_optimization_20250923_233912/corrected_test.py", line 172, in test_corrected_optimization
    json.dump(results, f, indent=2)
  File "/usr/local/lib/python3.9/json/__init__.py", line 179, in dump
    for chunk in iterable:
  File "/usr/local/lib/python3.9/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/local/lib/python3.9/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/local/lib/python3.9/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/local/lib/python3.9/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/local/lib/python3.9/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/usr/local/lib/python3.9/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type function is not JSON serializable
