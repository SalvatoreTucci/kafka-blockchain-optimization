version: '3.7'

networks:
  fabric-kafka-net:
    driver: bridge

volumes:
  kafka-data:
  zk-data:
  orderer-data:
  peer0-org1-data:
  peer0-org2-data:
  prometheus-data:
  grafana-data:

services:
  # Zookeeper per Kafka Ordering Service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - fabric-kafka-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zk-data:/var/lib/zookeeper/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "echo srvr | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka con configurazione ottimale Week 3 (config_100)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    networks:
      - fabric-kafka-net
    ports:
      - "9092:9092"
      - "9999:9999"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      # Basic Kafka Configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      
      # JMX Configuration per monitoring
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      
      # Week 3 Optimal Configuration (config_100)
      KAFKA_BATCH_SIZE: 65536          # 65KB batch size
      KAFKA_LINGER_MS: 0               # No linger time
      KAFKA_COMPRESSION_TYPE: none     # No compression
      KAFKA_BUFFER_MEMORY: 67108864    # 64MB buffer
      KAFKA_NUM_NETWORK_THREADS: 4
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 131072
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 131072
      KAFKA_REPLICA_FETCH_MAX_BYTES: 2097152
      
      # Memory settings
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Hyperledger Fabric Orderer con Kafka
  orderer:
    image: hyperledger/fabric-orderer:2.4.7
    hostname: orderer
    container_name: orderer
    networks:
      - fabric-kafka-net
    ports:
      - "7050:7050"
      - "8443:8443"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      # General Configuration
      FABRIC_LOGGING_SPEC: INFO
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
      ORDERER_GENERAL_BOOTSTRAPMETHOD: none
      ORDERER_GENERAL_LOCALMSPID: OrdererMSP
      ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/orderer/msp
      
      # Kafka Ordering Service Configuration
      ORDERER_GENERAL_ORDERERTYPE: kafka
      ORDERER_KAFKA_BROKERS: '[kafka:29092]'
      ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR: 1
      ORDERER_KAFKA_VERBOSE: true
      ORDERER_KAFKA_VERSION: 2.8.1
      
      # Optimal Kafka Settings (from Week 3)
      ORDERER_KAFKA_BATCH_SIZE: 65536
      ORDERER_KAFKA_LINGER_MS: 0
      ORDERER_KAFKA_COMPRESSION_TYPE: none
      
      # Operations and metrics
      ORDERER_OPERATIONS_LISTENADDRESS: 0.0.0.0:8443
      ORDERER_METRICS_PROVIDER: prometheus
      
    volumes:
      - orderer-data:/var/hyperledger/production/orderer
      - ../crypto-config/orderer:/var/hyperledger/orderer/msp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8443/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Fabric Peer Org1
  peer0-org1:
    image: hyperledger/fabric-peer:2.4.7
    hostname: peer0-org1
    container_name: peer0-org1
    networks:
      - fabric-kafka-net
    ports:
      - "7051:7051"
      - "9444:9444"
    depends_on:
      - orderer
    environment:
      # Core peer configuration
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: fabric-kafka-net
      FABRIC_LOGGING_SPEC: INFO
      CORE_PEER_ID: peer0-org1
      CORE_PEER_ADDRESS: peer0-org1:7051
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_MSPCONFIGPATH: /etc/hyperledger/fabric/msp
      CORE_PEER_GOSSIP_BOOTSTRAP: peer0-org2:8051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0-org1:7051
      
      # Operations and metrics
      CORE_OPERATIONS_LISTENADDRESS: 0.0.0.0:9444
      CORE_METRICS_PROVIDER: prometheus
      
      # Chaincode configuration
      CORE_CHAINCODE_GOLANG_RUNTIME: hyperledger/fabric-ccenv:2.4.7
      CORE_CHAINCODE_NODE_RUNTIME: hyperledger/fabric-nodeenv:2.4.7
      
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - peer0-org1-data:/var/hyperledger/production
      - ../crypto-config/org1/peer0:/etc/hyperledger/fabric/msp
    restart: unless-stopped

  # Fabric Peer Org2
  peer0-org2:
    image: hyperledger/fabric-peer:2.4.7
    hostname: peer0-org2
    container_name: peer0-org2
    networks:
      - fabric-kafka-net
    ports:
      - "8051:8051"
      - "9445:9445"
    depends_on:
      - orderer
    environment:
      # Core peer configuration
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: fabric-kafka-net
      FABRIC_LOGGING_SPEC: INFO
      CORE_PEER_ID: peer0-org2
      CORE_PEER_ADDRESS: peer0-org2:8051
      CORE_PEER_LOCALMSPID: Org2MSP
      CORE_PEER_MSPCONFIGPATH: /etc/hyperledger/fabric/msp
      CORE_PEER_GOSSIP_BOOTSTRAP: peer0-org1:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0-org2:8051
      
      # Operations and metrics
      CORE_OPERATIONS_LISTENADDRESS: 0.0.0.0:9445
      CORE_METRICS_PROVIDER: prometheus
      
      # Chaincode configuration
      CORE_CHAINCODE_GOLANG_RUNTIME: hyperledger/fabric-ccenv:2.4.7
      CORE_CHAINCODE_NODE_RUNTIME: hyperledger/fabric-nodeenv:2.4.7
      
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - peer0-org2-data:/var/hyperledger/production
      - ../crypto-config/org2/peer0:/etc/hyperledger/fabric/msp
    restart: unless-stopped

  # Fabric CLI per operazioni chaincode
  cli:
    image: hyperledger/fabric-tools:2.4.7
    hostname: cli
    container_name: cli
    networks:
      - fabric-kafka-net
    depends_on:
      - peer0-org1
      - peer0-org2
      - orderer
    environment:
      GOPATH: /opt/gopath
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      FABRIC_LOGGING_SPEC: INFO
      CORE_PEER_ID: cli
      CORE_PEER_ADDRESS: peer0-org1:7051
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_MSPCONFIGPATH: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto
      - ../../chaincode:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c 'while true; do sleep 30; done;'
    restart: unless-stopped

  # Prometheus per monitoring
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    networks:
      - fabric-kafka-net
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ../../configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana per visualizzazione
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    networks:
      - fabric-kafka-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../configs/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
